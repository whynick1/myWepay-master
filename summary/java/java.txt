Summary

1. Prefer collect from returned call and print; than pass down variable to call stack


2. when need to pass obvious redundent param, instead create a wrapper class to hold the attributes (encasulated, inmutatble, thread-safe)


3. use constructor as "::new" for functional interface (with exactly one abstract method)


4. when expose private object to public, it is likely we want to other class to modify it, there are 2 things we can do:
	1) highly important: use a getter method to return a copy of that object
	2) less imporant: return real object, then declare the field in calling class with "final"


5. For class implementing redundent method (should never be called) from interface, always throw UnsupportedOperationException


6. public field VS getter
	1) Encapsulation of behavior associated with getting or setting the property
		-- allows additional functionality (like validation) to be added more easily later

	2) Hiding the internal representation of the property

	3) Insulating your public interface from change
		-- in case we want to return a copy/unmofified copy

	4) Providing a debugging interception point for when a property changes at runtime

	5) Allowing inheritors to change the semantics of how the property behaves and is exposed by overriding the getter/setter methods


7. The correct order of modifiers is:
	1) public
	2) protected
	3) private
	4) abstract
	5) default
	6) static
	7) final
	8) transient
	9) volatile
	10) synchronized
	11) native
	12) strictfp
